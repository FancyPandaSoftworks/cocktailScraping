sqldf("select count(isClicked) from alcoholCount group by isClicked order by isClicked")
colnames(alcoholCount)[2]
colnames(alcoholCount)[2] <- "cocktailName"
sqldf("select cocktailName, count(isClicked) from alcoholCount group by cocktailName order by isClicked")
sqldf("select cocktailName, count(isClicked) as count from alcoholCount group by cocktailName order by count")
sqldf("select cocktailName, count(isClicked) as count
from alcoholCount
group by cocktailName
order by count
desc")
alcoholCount <- sqldf("select cocktailName, count(isClicked) as count
from alcoholCount
group by cocktailName
order by count
desc")
View(alcoholCount)
colnames(alcoholCount)
colnames(alcoholCount)[1] <- "cocktail name"
library(data.table)
library(shiny)
library(shinydashboard, warn.conflicts = FALSE)
library(readr)
library(sqldf)
######################################
###Load in and preprocess dataframe###
######################################
myCocktail <- read.csv("myCocktail.csv")
myCocktail$X<-NULL
###Replace the dot in the names with a space###
names(myCocktail) <- gsub(names(myCocktail), pattern = "\\.", replacement = " ")
###Change column name###
names(myCocktail)[which(names(myCocktail)=="cocktailName")]<- "cocktail name"
###Change type###
changeFactorToCharacter()
###########################################################
###Get frequency of all the alcohol, useful for ordering###
###########################################################
###Get frequency table###
alcoholFreq <- as.data.frame(table(myCocktail$`Primary alcohol by volume`))
###Order the alcohol by frequency, highest frequency on top###
alcoholFreq <- alcoholFreq[order(-alcoholFreq$Freq),]
###Change variable name so it is more understandable###
names(alcoholFreq)[1] <- "alcohol"
###Reindex###
row.names(alcoholFreq) <- 1:nrow(alcoholFreq)
###Get the top 15 alcohol, other alcohols are not needed due to low frequency###
alcoholFreq <- alcoholFreq[1:15,]
#######################
###Building Shinyapp###
#######################
###Shinyapp UI###
ui <- dashboardPage(
dashboardHeader(title = "cocktail dashboard"),
dashboardSidebar(
sidebarMenu(
tags$head(
tags$style(Type="text/css",
".test_type{color: white;
font-size: 20px;
font-style: italic;}"
)
),
###Which alcohol do you have###
checkboxGroupInput(inputId = "yourAlcohol",
label = "Select the alcohol you have",
choices = alcoholFreq$alcohol)
),
sidebarMenuOutput("cocktailAlcohol")
),
dashboardBody(
fluidPage(
tabsetPanel(
##################################
###All cocktails are shown here###  ###The order afterwards is from highest frequency to the
##################################                                      lowest frequency of the main alcohol###
###App title###
tabPanel(title = "All cocktails here", value = "allcocktail", fluid = TRUE,  titlePanel("In the land of beers,
the cocktail is king"),
###Sidebar layout with input and output definitions###
sidebarLayout(
###Sidebar panel for inputs###
sidebarPanel(
###Input for cocktail###
uiOutput("cocktailInput")
),
###Main panel###
mainPanel(
###Output###
dataTableOutput('cocktailTableAll'),
htmlOutput('descriptionAll')
)
)
)
)
)
)
)
####Shinyapp server###
server <- function(input, output){
###################
###All cocktails###
###################
alcoholList <- c()
resultList <- c()
output$cocktailInput <- renderUI({
###If nothing is chosen in the sidebar, then we show all the cocktails###
if(is.null(input$yourAlcohol)){
choice <- sort(unique(myCocktail$`cocktail name`))
}
###We store the chosen alcohol in a list and shows the cocktails that contain the alcohol###
else{
alcoholList <- append(alcoholList, input$yourAlcohol)
for (i in 1:length(alcoholList)) {
resultList <- unique(append(resultList, myCocktail$`cocktail name`[myCocktail$`Primary alcohol by volume`==alcoholList[i]]))
}
###Remove all the NA###
resultList <- resultList[complete.cases(resultList)]
###Get the alcohol information that is in the alcohol list###
alcoholCount <- myCocktail[myCocktail$`cocktail name` %in% resultList,]
alcoholCount <- unique(alcoholCount[,c(2,10)])
###Reindex###
rownames(alcoholCount) <- 1:nrow(alcoholCount)
###1 if the alcohol is in the list, 0 if not###
alcoholCount$isClicked <- alcoholCount$`Primary alcohol by volume` %in% alcoholList
alcoholCount$isClicked <- as.integer(alcoholCount$isClicked)
colnames(alcoholCount)[2] <- "cocktailName"
alcoholCount <- sqldf("select cocktailName, count(isClicked) as count
from alcoholCount
group by cocktailName
order by count
desc")
colnames(alcoholCount)[1] <- "cocktail name"
choice <- alcoholCount$`cocktail name`
}
selectInput(inputId = "cocktailInput",
label = "Time to move on, crownless king",
choices = choice)
})
output$cocktailTableAll <- renderDataTable({
###Create the ingredients and the ratio dataframe###
res <- myCocktail[,c(10,6,9)]
###Select the cocktail###
res <- res[myCocktail$`cocktail name`==input$cocktailInput,]
###Either choose IBA or commonly used ingredient###
res <- res[,colSums(is.na(res))<nrow(res)]
res <- unique(res)
###Reindex###
row.names(res)<- 1:nrow(res)
###Only the first row needs to show the cocktail name, other rows don't need to###
if(nrow(res)>1){
for (i in 2:nrow(res)) {
res$`cocktail name`[i]<- NA
}
}
res <- res
})
###description below the table###
output$descriptionAll <- renderText({
paste("<h4><br><br><br>",unique(myCocktail$Preparation[myCocktail$`cocktail name`==input$cocktailInput]), "</h4>")
})
}
shinyApp(ui, server)
View(alcoholCount)
library(data.table)
library(shiny)
library(shinydashboard, warn.conflicts = FALSE)
library(readr)
library(sqldf)
######################################
###Load in and preprocess dataframe###
######################################
myCocktail <- read.csv("myCocktail.csv")
myCocktail$X<-NULL
###Replace the dot in the names with a space###
names(myCocktail) <- gsub(names(myCocktail), pattern = "\\.", replacement = " ")
###Change column name###
names(myCocktail)[which(names(myCocktail)=="cocktailName")]<- "cocktail name"
###Change type###
changeFactorToCharacter()
###########################################################
###Get frequency of all the alcohol, useful for ordering###
###########################################################
###Get frequency table###
alcoholFreq <- as.data.frame(table(myCocktail$`Primary alcohol by volume`))
###Order the alcohol by frequency, highest frequency on top###
alcoholFreq <- alcoholFreq[order(-alcoholFreq$Freq),]
###Change variable name so it is more understandable###
names(alcoholFreq)[1] <- "alcohol"
###Reindex###
row.names(alcoholFreq) <- 1:nrow(alcoholFreq)
###Get the top 15 alcohol, other alcohols are not needed due to low frequency###
alcoholFreq <- alcoholFreq[1:15,]
#######################
###Building Shinyapp###
#######################
###Shinyapp UI###
ui <- dashboardPage(
dashboardHeader(title = "cocktail dashboard"),
dashboardSidebar(
sidebarMenu(
tags$head(
tags$style(Type="text/css",
".test_type{color: white;
font-size: 20px;
font-style: italic;}"
)
),
###Which alcohol do you have###
checkboxGroupInput(inputId = "yourAlcohol",
label = "Select the alcohol you have",
choices = alcoholFreq$alcohol)
),
sidebarMenuOutput("cocktailAlcohol")
),
dashboardBody(
fluidPage(
tabsetPanel(
##################################
###All cocktails are shown here###  ###The order afterwards is from highest frequency to the
##################################                                      lowest frequency of the main alcohol###
###App title###
tabPanel(title = "All cocktails here", value = "allcocktail", fluid = TRUE,  titlePanel("In the land of beers,
the cocktail is king"),
###Sidebar layout with input and output definitions###
sidebarLayout(
###Sidebar panel for inputs###
sidebarPanel(
###Input for cocktail###
uiOutput("cocktailInput")
),
###Main panel###
mainPanel(
###Output###
dataTableOutput('cocktailTableAll'),
htmlOutput('descriptionAll')
)
)
)
)
)
)
)
####Shinyapp server###
server <- function(input, output){
###################
###All cocktails###
###################
alcoholList <- c()
resultList <- c()
output$cocktailInput <- renderUI({
###If nothing is chosen in the sidebar, then we show all the cocktails###
if(is.null(input$yourAlcohol)){
choice <- sort(unique(myCocktail$`cocktail name`))
}
###We store the chosen alcohol in a list and shows the cocktails that contain the alcohol###
else{
alcoholList <- append(alcoholList, input$yourAlcohol)
for (i in 1:length(alcoholList)) {
resultList <- unique(append(resultList, myCocktail$`cocktail name`[myCocktail$`Primary alcohol by volume`==alcoholList[i]]))
}
###Remove all the NA###
resultList <- resultList[complete.cases(resultList)]
###Get the alcohol information that is in the alcohol list###
alcoholCount <- myCocktail[myCocktail$`cocktail name` %in% resultList,]
alcoholCount <- unique(alcoholCount[,c(2,10)])
###Reindex###
rownames(alcoholCount) <- 1:nrow(alcoholCount)
###1 if the alcohol is in the list, 0 if not###
alcoholCount$isClicked <- alcoholCount$`Primary alcohol by volume` %in% alcoholList
alcoholCount$isClicked <- as.integer(alcoholCount$isClicked)
colnames(alcoholCount)[2] <- "cocktailName"
alcoholCount <- sqldf("select cocktailName, count(isClicked) as count
from alcoholCount
group by cocktailName
order by count
desc")
colnames(alcoholCount)[1] <- "cocktail name"
choice <- alcoholCount$`cocktail name`
}
selectInput(inputId = "cocktailInput",
label = "Time to move on, crownless king",
choices = choice)
})
output$cocktailTableAll <- renderDataTable({
###Create the ingredients and the ratio dataframe###
res <- myCocktail[,c(10,6,9)]
###Select the cocktail###
res <- res[myCocktail$`cocktail name`==input$cocktailInput,]
###Either choose IBA or commonly used ingredient###
res <- res[,colSums(is.na(res))<nrow(res)]
res <- unique(res)
###Reindex###
row.names(res)<- 1:nrow(res)
###Only the first row needs to show the cocktail name, other rows don't need to###
if(nrow(res)>1){
for (i in 2:nrow(res)) {
res$`cocktail name`[i]<- NA
}
}
res <- res
})
###description below the table###
output$descriptionAll <- renderText({
paste("<h4><br><br><br>",unique(myCocktail$Preparation[myCocktail$`cocktail name`==input$cocktailInput]), "</h4>")
})
}
shinyApp(ui, server)
alcoholList <- c("vodka", "triple sec")
for (i in 1:length(alcoholList)) {
resultList <- unique(append(resultList, myCocktail$`cocktail name`[myCocktail$`Primary alcohol by volume`==alcoholList[i]]))
}
###Remove all the NA###
resultList <- resultList[complete.cases(resultList)]
###Get the alcohol information that is in the alcohol list###
alcoholCount <- myCocktail[myCocktail$`cocktail name` %in% resultList,]
alcoholCount <- unique(alcoholCount[,c(2,10)])
###Reindex###
rownames(alcoholCount) <- 1:nrow(alcoholCount)
###1 if the alcohol is in the list, 0 if not###
alcoholCount$isClicked <- alcoholCount$`Primary alcohol by volume` %in% alcoholList
alcoholCount$isClicked <- as.integer(alcoholCount$isClicked)
colnames(alcoholCount)[2] <- "cocktailName"
###Get the total count of all the alcohol matched with the cocktail###
alcoholCount <- sqldf("select cocktailName, count(isClicked) as count
from alcoholCount
group by cocktailName
order by count
desc")
colnames(alcoholCount)[1] <- "cocktail name"
View(alcoholCount)
for (i in 1:length(alcoholList)) {
resultList <- unique(append(resultList, myCocktail$`cocktail name`[myCocktail$`Primary alcohol by volume`==alcoholList[i]]))
}
###Remove all the NA###
resultList <- resultList[complete.cases(resultList)]
###Get the alcohol information that is in the alcohol list###
alcoholCount <- myCocktail[myCocktail$`cocktail name` %in% resultList,]
alcoholCount <- unique(alcoholCount[,c(2,10)])
###Reindex###
rownames(alcoholCount) <- 1:nrow(alcoholCount)
head(alcoholCount)
###1 if the alcohol is in the list, 0 if not###
alcoholCount$isClicked <- alcoholCount$`Primary alcohol by volume` %in% alcoholList
alcoholCount$isClicked <- as.integer(alcoholCount$isClicked)
head(alcoholCount)
colnames(alcoholCount)[2] <- "cocktailName"
View(alcoholCount)
alcoholList
View(sqldf("select cocktailName, count(isClicked) as count
from alcoholCount
group by cocktailName
order by count
desc"))
alcoholCount
sqldf("select cocktailName, count(isClicked) as count
from alcoholCount
group by cocktailName
order by count
desc")
sqldf("select cocktailName, sum(isClicked) as count
from alcoholCount
group by cocktailName
order by count
desc")
library(data.table)
library(shiny)
library(shinydashboard, warn.conflicts = FALSE)
library(readr)
library(sqldf)
######################################
###Load in and preprocess dataframe###
######################################
myCocktail <- read.csv("myCocktail.csv")
myCocktail$X<-NULL
###Replace the dot in the names with a space###
names(myCocktail) <- gsub(names(myCocktail), pattern = "\\.", replacement = " ")
###Change column name###
names(myCocktail)[which(names(myCocktail)=="cocktailName")]<- "cocktail name"
###Change type###
changeFactorToCharacter()
###########################################################
###Get frequency of all the alcohol, useful for ordering###
###########################################################
###Get frequency table###
alcoholFreq <- as.data.frame(table(myCocktail$`Primary alcohol by volume`))
###Order the alcohol by frequency, highest frequency on top###
alcoholFreq <- alcoholFreq[order(-alcoholFreq$Freq),]
###Change variable name so it is more understandable###
names(alcoholFreq)[1] <- "alcohol"
###Reindex###
row.names(alcoholFreq) <- 1:nrow(alcoholFreq)
###Get the top 15 alcohol, other alcohols are not needed due to low frequency###
alcoholFreq <- alcoholFreq[1:15,]
#######################
###Building Shinyapp###
#######################
###Shinyapp UI###
ui <- dashboardPage(
dashboardHeader(title = "cocktail dashboard"),
dashboardSidebar(
sidebarMenu(
tags$head(
tags$style(Type="text/css",
".test_type{color: white;
font-size: 20px;
font-style: italic;}"
)
),
###Which alcohol do you have###
checkboxGroupInput(inputId = "yourAlcohol",
label = "Select the alcohol you have",
choices = alcoholFreq$alcohol)
),
sidebarMenuOutput("cocktailAlcohol")
),
dashboardBody(
fluidPage(
tabsetPanel(
##################################
###All cocktails are shown here###  ###The order afterwards is from highest frequency to the
##################################                                      lowest frequency of the main alcohol###
###App title###
tabPanel(title = "All cocktails here", value = "allcocktail", fluid = TRUE,  titlePanel("In the land of beers,
the cocktail is king"),
###Sidebar layout with input and output definitions###
sidebarLayout(
###Sidebar panel for inputs###
sidebarPanel(
###Input for cocktail###
uiOutput("cocktailInput")
),
###Main panel###
mainPanel(
###Output###
dataTableOutput('cocktailTableAll'),
htmlOutput('descriptionAll')
)
)
)
)
)
)
)
####Shinyapp server###
server <- function(input, output){
###################
###All cocktails###
###################
alcoholList <- c()
resultList <- c()
output$cocktailInput <- renderUI({
###If nothing is chosen in the sidebar, then we show all the cocktails###
if(is.null(input$yourAlcohol)){
choice <- sort(unique(myCocktail$`cocktail name`))
}
###We store the chosen alcohol in a list and shows the cocktails that contain the alcohol###
else{
alcoholList <- append(alcoholList, input$yourAlcohol)
for (i in 1:length(alcoholList)) {
resultList <- unique(append(resultList, myCocktail$`cocktail name`[myCocktail$`Primary alcohol by volume`==alcoholList[i]]))
}
###Remove all the NA###
resultList <- resultList[complete.cases(resultList)]
###Get the alcohol information that is in the alcohol list###
alcoholCount <- myCocktail[myCocktail$`cocktail name` %in% resultList,]
alcoholCount <- unique(alcoholCount[,c(2,10)])
###Reindex###
rownames(alcoholCount) <- 1:nrow(alcoholCount)
###1 if the alcohol is in the list, 0 if not###
alcoholCount$isClicked <- alcoholCount$`Primary alcohol by volume` %in% alcoholList
alcoholCount$isClicked <- as.integer(alcoholCount$isClicked)
colnames(alcoholCount)[2] <- "cocktailName"
###Get the total count of all the alcohol matched with the cocktail###
alcoholCount <- sqldf("select cocktailName, sum(isClicked) as count
from alcoholCount
group by cocktailName
order by count
desc")
colnames(alcoholCount)[1] <- "cocktail name"
choice <- alcoholCount$`cocktail name`
}
selectInput(inputId = "cocktailInput",
label = "Time to move on, crownless king",
choices = choice)
})
output$cocktailTableAll <- renderDataTable({
###Create the ingredients and the ratio dataframe###
res <- myCocktail[,c(10,6,9)]
###Select the cocktail###
res <- res[myCocktail$`cocktail name`==input$cocktailInput,]
###Either choose IBA or commonly used ingredient###
res <- res[,colSums(is.na(res))<nrow(res)]
res <- unique(res)
###Reindex###
row.names(res)<- 1:nrow(res)
###Only the first row needs to show the cocktail name, other rows don't need to###
if(nrow(res)>1){
for (i in 2:nrow(res)) {
res$`cocktail name`[i]<- NA
}
}
res <- res
})
###description below the table###
output$descriptionAll <- renderText({
paste("<h4><br><br><br>",unique(myCocktail$Preparation[myCocktail$`cocktail name`==input$cocktailInput]), "</h4>")
})
}
shinyApp(ui, server)
alcoholFreq
runApp('shinyAppCocktail.R')
runApp('shinyAppCocktail.R')
