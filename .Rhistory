shinyApp(ui, server)
alcoholFreq
runApp('shinyAppCocktail.R')
runApp('shinyAppCocktail.R')
###############
library(data.table)
library(shiny)
library(shinydashboard, warn.conflicts = FALSE)
library(readr)
library(sqldf)
###############
###Functions###
###############
###Change factors to character function###
changeFactorToCharacter <- function(){
for (i in 1:ncol(myCocktail)) {
myCocktail[,i] <<- as.character(myCocktail[,i])
}
myCocktail$`Standard drinkware` <<- as.character(myCocktail$`Standard drinkware`)
myCocktail$`IBA specifiedingredients` <<- as.character(myCocktail$`IBA specifiedingredients`)
myCocktail$`Commonly used ingredients` <<- as.character(myCocktail$`Commonly used ingredients`)
}
######################################
###Load in and preprocess dataframe###
######################################
myCocktail <- read.csv("myCocktail.csv")
myCocktail$X<-NULL
###Replace the dot in the names with a space###
names(myCocktail) <- gsub(names(myCocktail), pattern = "\\.", replacement = " ")
###Change column name###
names(myCocktail)[which(names(myCocktail)=="cocktailName")]<- "cocktail name"
###Change type###
changeFactorToCharacter()
View(myCocktail)
gsub("ç", "c", myCocktail$`Primary alcohol by volume`)
runApp('shinyAppCocktail.R')
myCocktail <- read.csv("myCocktail.csv")
myCocktail$X<-NULL
###Replace the dot in the names with a space###
names(myCocktail) <- gsub(names(myCocktail), pattern = "\\.", replacement = " ")
###Change column name###
names(myCocktail)[which(names(myCocktail)=="cocktailName")]<- "cocktail name"
###Change type###
changeFactorToCharacter()
###Change ç to c###
myCocktail$`Primary alcohol by volume` <- gsub("ç", "c", myCocktail$`Primary alcohol by volume`)
myCocktail$`Commonly used ingredients` <- gsub("ç", "c", myCocktail$`Commonly used ingredients`)
myCocktail$`IBA specifiedingredients` <- gsub("ç", "c", myCocktail$`IBA specifiedingredients`)
###########################################################
###Get frequency of all the alcohol, useful for ordering###
###########################################################
###Get frequency table###
alcoholFreq <- as.data.frame(table(myCocktail$`Primary alcohol by volume`))
###Order the alcohol by frequency, highest frequency on top###
alcoholFreq <- alcoholFreq[order(-alcoholFreq$Freq),]
###Change variable name so it is more understandable###
names(alcoholFreq)[1] <- "alcohol"
###Reindex###
row.names(alcoholFreq) <- 1:nrow(alcoholFreq)
###Get the top 15 alcohol, other alcohols are not needed due to low frequency###
alcoholFreq <- alcoholFreq[1:15,]
View(alcoholFreq)
alcoholFreq$alcohol
rm(list=ls())
################################################
###Create a crawler to scrape all cocktail data from wiki###
################################################
###############
###Libraries###
###############
library(rvest)
library(magrittr)
library(sqldf)
library(XML)
library(dplyr)
library(purrr)
library(tidyr)
library(dplyr)
library(data.table)
library(splitstackshape)
library(tidyverse)
###################
###Preprocessing###
###################
###Base URL with all the cocktails###
baseUrl <- read_html("https://en.wikipedia.org/wiki/List_of_cocktails")
###Create empty cocktail list###
cocktailList <- data.table("attributes" = c("Type",
"Primary alcohol by volume",
"Served",
"Standard garnish",
"Standard drinkware",
"IBA specifiedingredients",
"Preparation",
"Timing"))
###Retrieve all the cocktails in the list, after analyzing the wiki cocktail page we set a certain range in which we want to crawl###
for (i in 8:34) {
###########################################################################################################################
###First part is getting the list where the cocktails belong(Gin, Vodka etc). Then we crawl the cocktails from that list###
###########################################################################################################################
###Get xpath of the list###
xpath <- paste0('//*[@id="mw-content-text"]/div/div[', i, ']/ul')
###It can occur that the list is empty, which means nothing to scrape. In this case, we skip it###
if(length(html_nodes(baseUrl, xpath = xpath))==0){
next
}
###Start scraping###
else{
mainCocktail <- html_nodes(baseUrl, xpath = xpath)
mainCocktail <- html_nodes(mainCocktail ,xpath = 'li/a/@href[1]')
###Extract the links out of the xml nodes###
webList <- c()
for (i in 1:length(mainCocktail)) {
webList[i] <- as.character(mainCocktail[i])
}
webList <- as.data.frame(webList)
###Cleanse the url and make the url correct so it can be used to crawl###
webList$webList <- sub("href=", "https://en.wikipedia.org", webList$webList)
webList$webList <- gsub('"', '', webList$webList)
webList$webList <- gsub('\\s',"", webList$webList)
###It seems like some have %C3 in their names as a kind of hyperlink, so we cannot remove it if that is the case###
for (i in 1:nrow(webList)) {
if(!('%C3' %in% webList$webList[i])){
webList$webList <- gsub('#.*', '', webList$webList)
}
}
###After this is finished, we obtain the main type with all the cocktail links included###
######################################################
###Here we start crawling the cocktails of the list###
######################################################
###Create a loop so it crawls all the links of the main type###
for (i in 1:nrow(webList)) {
###Read the page into R###
cocktailPage <- read_html(webList$webList[i])
###Scrape the table that includes information about the cocktail###
cocktail <- cocktailPage %>%
html_nodes("table.infobox") %>%
html_table(header=TRUE)
###The length of the cocktail shows the number of cocktails on one page###
###If the length is 0, then it means that there is no information, so we skip that###
if(length(cocktail)>0){
for (j in 1:length(cocktail)) {
###Convert into dataframe###
cocktailDf <- cocktail[[j]]
###Scrape name of the cocktail###
cocktailName <- cocktailPage %>% html_nodes(xpath = paste0('//*[@id="mw-content-text"]/div/table[', j, ']/caption')) ###todo
###It occasionally happens that the name is in the second OR EVEN ANOTHER RANDOM index for some reason, thanks wiki###
if(j == 1){
h <-1
while(length(cocktailName)==0){
cocktailName <- cocktailPage %>% html_nodes(xpath = paste0('//*[@id="mw-content-text"]/div/table[', h+j, ']/caption'))
h <- h+1
}
}
###Adding the number to the index (j) so it gets the right name###
else{
if(length(cocktailName)==0){
cocktailName <- cocktailPage %>% html_nodes(xpath = paste0('//*[@id="mw-content-text"]/div/table[', h+j, ']/caption'))
}
}
cocktailName <- as.character(cocktailName)
###Cleanse cocktail name so html gets removed###
cocktailName <- gsub(".*>(.*)<.*", "\\1", cocktailName)
###Because there is one stupid name that makes the cocktail not showing the table###
cocktailName<- gsub('[[:punct:]]aka.*',"",cocktailName)
###If the cocktail already exists, skip###
if(cocktailName %in% colnames(cocktailList)){
#print(webList$webList[i])
next
}
###Change column name so we can merge it with the cocktail table###
cocktailDf <- as.data.table(cocktailDf)
colnames(cocktailDf)[1] <- "attributes"
###The name of the cocktail###
colnames(cocktailDf)[2] <- cocktailName
###Change \n into <br/> of all tables###
for (k in 1:nrow(cocktailDf)) {
cocktailDf[k,2] <- gsub("\n", "~~~",cocktailDf[k,2])
}
###Merging the cocktails with the cocktail table###
cocktailList <- merge(cocktailList, cocktailDf, by = "attributes", all = TRUE)
}
}
###If the length of the cocktail page is 0, it means there is no table to retrieve information. Then we skip to the next one###
else{
next
}
}
}
}
###@@@@@@@@@@@@@@@###
###End of crawling###
###@@@@@@@@@@@@@@@###
###########################
###preprocessing the dataframe###
###########################
###############
###Functions###
###############
###Change factors to character function###
changeFactorToCharacter <- function(){
for (i in 1:ncol(myCocktail)) {
myCocktail[,i] <<- as.character(myCocktail[,i])
}
myCocktail$`Standard drinkware` <<- as.character(myCocktail$`Standard drinkware`)
myCocktail$`IBA specifiedingredients` <<- as.character(myCocktail$`IBA specifiedingredients`)
myCocktail$`Commonly used ingredients` <<- as.character(myCocktail$`Commonly used ingredients`)
}
#################################
###Column and row manipulation###
#################################
###Some ingredients are in another row, we put that in the commonly used ingredients###
myCocktail<- as.data.frame(cocktailList)
for (i in 2:ncol(myCocktail)) {
if(!is.na(myCocktail[75,i])&&is.na(myCocktail[52,i])){
myCocktail[52,i]<- myCocktail[75,i]
}
}
myCocktail <- data.table(myCocktail)
###Since the merge will cause a lot of unnecessary rows(Due to force merge), we only select rows that are needed###
myCocktail <- cocktailList[c("attributes","Type",
"Primary alcohol by volume",
"Served",
"Standard garnish",
"Standard drinkware",
"IBA specifiedingredients",
"Preparation",
"Timing",
"Commonly used ingredients"),]
###Column to row name, because it is not a cocktail###
myCocktail <- as.data.frame(myCocktail)
myCocktail <- myCocktail[-c(1),]
###Reindex###
row.names(myCocktail)<- 1:nrow(myCocktail)
View(myCocktail)
###Transpose the dataframe so the cocktails are rows and variables become columns###
myCocktail <- as.data.frame((t(myCocktail)))
###Change factor to character so it can be split###
myCocktail$`1`<- as.character(myCocktail$`1`)
myCocktail$`2`<- as.character(myCocktail$`2`)
myCocktail$`3`<- as.character(myCocktail$`3`)
myCocktail$`4`<- as.character(myCocktail$`4`)
myCocktail$`5`<- as.character(myCocktail$`5`)
myCocktail$`6`<- as.character(myCocktail$`6`)
myCocktail$`7`<- as.character(myCocktail$`7`)
myCocktail$`8`<- as.character(myCocktail$`8`)
myCocktail$`9`<- as.character(myCocktail$`9`)
###Names of the cocktails become a column###
myCocktail$cocktailName <- rownames(myCocktail)
###first row to colnames###
colnames(myCocktail)<- myCocktail[1,]
###Remove first row###
myCocktail <- myCocktail[c(-1),]
###Change column name
names(myCocktail)[names(myCocktail)=="attributes"] <- "cocktailName"
###Reindex###
row.names(myCocktail)<- 1:nrow(myCocktail)
###Replace the dot in the names with a space###
names(myCocktail) <- gsub(names(myCocktail), pattern = "\\.", replacement = " ")
#######################################################################################
###Modifiying the cocktail informations needed for Shinyapp so it is shown correctly###
#######################################################################################
###Something goes wrong that causes a bug when publish Shinyapp###
myCocktail <- myCocktail[!myCocktail$cocktailName=="Agent Orange",]
###Split the ingredients based on certain regular expression###
myCocktail <- cSplit(myCocktail, "IBA specifiedingredients", sep = "~~~", direction = "long")
myCocktail <- cSplit(myCocktail, "Commonly used ingredients", sep = "~~~", direction = "long")
myCocktail <- myCocktail[order(myCocktail$cocktailName),]
#################################################################################
###Some cocktails aren't shown correctly, those are investigated and corrected###
#################################################################################
###Zombie was not shown correctly because the ingredients were in the drinkware column###
myCocktail <- cSplit(myCocktail, "Standard drinkware", sep = "~~~", direction = "long")
myCocktail <- as.data.frame(myCocktail)
changeFactorToCharacter()
myCocktail$`Commonly used ingredients`[myCocktail$cocktailName== "Zombie"] <- myCocktail$`Standard drinkware`[myCocktail$cocktailName== "Zombie"]
####!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!###
###WARNING WARNING WARNING WARNING WARNING WARNING###
###!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!###
###It seems like there are some ingredients in the "Ingredients as listed at CocktailDB" column. ###
###Maybe this column needs to be added in the dataframe, but we will see###
###Example###
myCocktail <- myCocktail[!myCocktail$cocktailName=="Red Russian",]
### all in one place###
# <- myCocktail[!myCocktail$cocktailName=="Breakfast martini",]
####!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!###
###WARNING WARNING WARNING WARNING WARNING WARNING###
###!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!###
########################
###Removing cocktails###
########################
###Strange format###
myCocktail <- myCocktail[!myCocktail$cocktailName=="Tom and Jerry",]
myCocktail <- myCocktail[!myCocktail$cocktailName=="Buck",]
###Bobby burns has the ingredients in a different column, but I am not interested in this one anyway###
myCocktail <- myCocktail[!myCocktail$cocktailName=="Bobby Burns",]
###Not an interesting shot###
myCocktail <- myCocktail[!myCocktail$cocktailName=="Astro pop",]
###This is the basic of all Fizz cocktails, so this one is empty. Thus, we remove it###
myCocktail <- myCocktail[!myCocktail$cocktailName=="Fizz",]
###Bad version of B-52###
myCocktail <- myCocktail[!myCocktail$cocktailName=="Baby Guinness",]
###Drink I would never make anyway###
myCocktail <- myCocktail[!myCocktail$cocktailName=="BLT",]
###No proper description###
myCocktail <- myCocktail[!myCocktail$cocktailName=="Black Velvet",]
myCocktail <- myCocktail[!myCocktail$cocktailName=="Chicago Cocktail",]
myCocktail <- myCocktail[!myCocktail$cocktailName=="Club-Mate",]
myCocktail <- myCocktail[!myCocktail$cocktailName=="El Toro Loco",]
myCocktail <- myCocktail[!myCocktail$cocktailName=="Pimm's",]
myCocktail <- myCocktail[!myCocktail$cocktailName=="Red Russian",]
myCocktail <- myCocktail[!myCocktail$cocktailName=="Salmiakki Koskenkorva",]
myCocktail <- myCocktail[!myCocktail$cocktailName=="Shirley Temple",]
myCocktail <- myCocktail[!myCocktail$cocktailName=="Sours",]
myCocktail <- myCocktail[!myCocktail$cocktailName=="Toronto",]
myCocktail <- myCocktail[!myCocktail$cocktailName=="Death in the Afternoon",]
###Cocktail without a type gets removed###
myCocktail<-myCocktail[!is.na(myCocktail$Type),]
View(myCocktail)
###################################################################################################
###Split the primary alcohol so you can sort it by alcohol, a bit easier to search for cocktails###
###################################################################################################
###Split the alcohol row into single parts###
myCocktail <- cSplit(myCocktail, "Primary alcohol by volume", sep = "~~~", direction = "long")
myCocktail <- as.data.frame(myCocktail)
changeFactorToCharacter()
###Change all alcohol into lower case###
myCocktail$`Primary alcohol by volume` <- tolower(myCocktail$`Primary alcohol by volume`)
###Change all whiskey into whisky###
myCocktail$`Primary alcohol by volume` <- gsub(pattern = ".*whisky", replacement = "whiskey", myCocktail$`Primary alcohol by volume`)
###Remove everything before whiskey so it is easier to sort###
myCocktail$`Primary alcohol by volume` <- gsub(pattern = ".*whiskey", replacement = "whiskey", myCocktail$`Primary alcohol by volume`)
###Change ç to c###
myCocktail$`Primary alcohol by volume` <- gsub("ç", "c", myCocktail$`Primary alcohol by volume`)
myCocktail$`Commonly used ingredients` <- gsub("ç", "c", myCocktail$`Commonly used ingredients`)
myCocktail$`IBA specifiedingredients` <- gsub("ç", "c", myCocktail$`IBA specifiedingredients`)
####@@@@@@@@@@@@@@@@@@@###
###End of preprocessing###
###@@@@@@@@@@@@@@@@@@@@###
###Write###
write.csv(myCocktail, "myCocktail.csv")
runApp('shinyAppCocktail.R')
array(42, dim = c(2,3,2))
array(42, dim = c(2,3)
)
array(42, dim = c(3,3))
array(42, dim = c(2,3,2,3))
View(array(42, dim = c(2,3,2,3)))
createIngredientList <- function(){
if(!is.na(myCocktail$`IBA specifiedingredients`)){
myCocktail$ingredientList <- myCocktail$`IBA specifiedingredients`
}
else{
myCocktail$ingredientList <- myCocktail$`Commonly used ingredients`
}
}
createIngredientList()
myCocktail$ingredientList <<- myCocktail$`IBA specifiedingredients`
myCocktail$ingredientList <- myCocktail$`IBA specifiedingredients`
myCocktail$ingredientList <- myCocktail$`Commonly used ingredients`
View(myCocktail)
is.na(myCocktail$ingredientList)
myCocktail$ingredientList <- myCocktail$`IBA specifiedingredients`
myCocktail$ingredientList[is.na(myCocktail$ingredientList)] <- myCocktail$`Commonly used ingredients`
View(myCocktail)
myCocktail$ingredientList <- myCocktail$`IBA specifiedingredients`
View(myCocktail)
library(dplyr)
?mutate
mutate(myCocktail, ingredientList = coalesce(ingredientList, `Commonly used ingredients`))
View(mutate(myCocktail, ingredientList = coalesce(ingredientList, `Commonly used ingredients`)))
View(myCocktail)
myCocktail <- mutate(myCocktail, ingredientList = coalesce(ingredientList, `Commonly used ingredients`))
View(myCocktail)
library(tm)
myCocktail$ingredientList <- removeNumbers(myCocktail$ingredientList)
View(myCocktail)
myCocktail$ingredientList <- removeWords(myCocktail$ingredientList, "cl")
View(myCocktail)
myCocktail$ingredientList <- removeWords(myCocktail$ingredientList, c("cl", "( parts)", ".", "( part)"))
View(myCocktail)
wordList <- c("cl", "( parts)", ".", "( part)")
tm_map(myCocktail$ingredientList, removeWords, )
tm_map(myCocktail$ingredientList, removeWords, wordList )
###All ingredients in one list###
myCocktail$ingredientList <- myCocktail$`IBA specifiedingredients`
myCocktail <- mutate(myCocktail, ingredientList = coalesce(ingredientList, `Commonly used ingredients`))
myCocktail$ingredientList <- removeNumbers(myCocktail$ingredientList)
View(myCocktail)
myCocktail$ingredientList <- removeWords(myCocktail$ingredientList, c("cl", "( parts)", ".", "( part)"))
View(myCocktail)
myCocktail$ingredientList <- removeWords(myCocktail$ingredientList, c("cl", "parts", "part"))
View(myCocktail)
###All ingredients in one list###
myCocktail$ingredientList <- myCocktail$`IBA specifiedingredients`
myCocktail <- mutate(myCocktail, ingredientList = coalesce(ingredientList, `Commonly used ingredients`))
myCocktail$ingredientList <- removeNumbers(myCocktail$ingredientList)
View(myCocktail)
myCocktail$ingredientList <- removeWords(myCocktail$ingredientList, c("cl", "oz"))
wordList <- c("cl", "oz")
myCocktail$ingredientList <- removeWords(myCocktail$ingredientList, wordList)
View(myCocktail)
wordList <- c("cl", "oz", "part", "parts")
myCocktail$ingredientList <- removeWords(myCocktail$ingredientList, wordList)
View(myCocktail)
###Remove stopwords###
myCocktail$ingredientList <- removeWords(myCocktail$ingredientList, stopwords("english"))
View(myCocktail)
###Remove everything in between bracket###
gsub("\\([^\\)]*\\)", "", myCocktail$ingredientList, perl=TRUE)
myCocktail$ingredientList <- myCocktail$`IBA specifiedingredients`
myCocktail <- mutate(myCocktail, ingredientList = coalesce(ingredientList, `Commonly used ingredients`))
###Remove all numbers##
myCocktail$ingredientList <- removeNumbers(myCocktail$ingredientList)
###Remove stopwords###
myCocktail$ingredientList <- removeWords(myCocktail$ingredientList, stopwords("english"))
###Remove everything in between bracket###
gsub("\\([^\\)]*\\)", "", myCocktail$ingredientList, perl=TRUE)
###Remove everything in between bracket###
myCocktail$ingredientList <-gsub("\\([^\\)]*\\)", "", myCocktail$ingredientList, perl=TRUE)
###Wordlist with words that need to be removed###
wordList <- c("cl", "oz", "part", "parts", "ml", "One", "part", "dash")
myCocktail$ingredientList <- removeWords(myCocktail$ingredientList, wordList)
View(myCocktail)
###Stemming words###
myCocktail$ingredientList <- stemDocument(myCocktail$ingredientList, language = "english")
###All ingredients in one list###
myCocktail$ingredientList <- myCocktail$`IBA specifiedingredients`
myCocktail <- mutate(myCocktail, ingredientList = coalesce(ingredientList, `Commonly used ingredients`))
###Remove all numbers##
myCocktail$ingredientList <- removeNumbers(myCocktail$ingredientList)
###-----------------------------------###
###Remove words that are not necessary###
###-----------------------------------###
###Remove stopwords###
myCocktail$ingredientList <- removeWords(myCocktail$ingredientList, stopwords("english"))
###Remove everything in between bracket###
myCocktail$ingredientList <-gsub("\\([^\\)]*\\)", "", myCocktail$ingredientList, perl=TRUE)
###Wordlist with words that need to be removed###
wordList <- c("cl", "oz", "parts", "ml", "One", "part", "dash")
myCocktail$ingredientList <- removeWords(myCocktail$ingredientList, wordList)
View(myCocktail)
###Wordlist with words that need to be removed###
wordList <- c("cl", "oz", "parts", "ml", "One", "part", "dash", "ounces", "ounce", "tsp", "½", "¾")
myCocktail$ingredientList <- removeWords(myCocktail$ingredientList, wordList)
View(myCocktail)
###Wordlist with words that need to be removed###
wordList <- c("cl", "oz", "parts", "ml", "One", "part", "dash", "ounces", "ounce", "tsp", "½", "¾", " <U+200B>")
myCocktail$ingredientList <- removeWords(myCocktail$ingredientList, wordList)
View(myCocktail)
Sprinkle <U+200B>/ teaspoon taste cinnamon
"Sprinkle <U+200B>/ teaspoon taste cinnamon"
###Wordlist with words that need to be removed###
wordList <- c("cl", "oz", "parts", "ml", "One", "part", "dash", "ounces", "ounce", "tsp", "½", "¾", "<U+200B>")
myCocktail$ingredientList <- removeWords(myCocktail$ingredientList, wordList)
View(myCocktail)
tolower(myCocktail$ingredientList)
###To lower###
myCocktail$ingredientList <- tolower(myCocktail$ingredientList)
###Remove stopwords###
myCocktail$ingredientList <- removeWords(myCocktail$ingredientList, stopwords("english"))
###Remove everything in between bracket###
myCocktail$ingredientList <-gsub("\\([^\\)]*\\)", "", myCocktail$ingredientList, perl=TRUE)
###Wordlist with words that need to be removed###
wordList <- c("cl", "oz", "parts", "ml", "one", "part", "dash", "ounces", "ounce", "tsp", "½", "¾","us fluid")
myCocktail$ingredientList <- removeWords(myCocktail$ingredientList, wordList)
View(myCocktail)
gsub(pattern = ".*whiskey", replacement = "whiskey", myCocktail$ingredientList)
###Remove certain parts before the main alcohol###
myCocktail$ingredientList <- gsub(pattern = ".*whiskey", replacement = "whiskey", myCocktail$ingredientList)
View(myCocktail)
myCocktail$ingredientList <- gsub(pattern = ".*vermouth", replacement = "vermouth", myCocktail$ingredientList)
myCocktail$ingredientList <- gsub(pattern = ".*brandy", replacement = "brandy", myCocktail$ingredientList)
myCocktail$ingredientList <- gsub(pattern = "lillet.*", replacement = "lillet", myCocktail$ingredientList)
myCocktail$ingredientList <- gsub(pattern = ".*rum", replacement = "rum", myCocktail$ingredientList)
View(myCocktail)
###Remove certain parts before the main alcohol###
myCocktail$ingredientList <- gsub(pattern = ".*whisky", replacement = "whiskey", myCocktail$ingredientList)
myCocktail$ingredientList <- gsub(pattern = ".*whiskey", replacement = "whiskey", myCocktail$ingredientList)
###All ingredients in one list###
myCocktail$ingredientList <- myCocktail$`IBA specifiedingredients`
myCocktail <- mutate(myCocktail, ingredientList = coalesce(ingredientList, `Commonly used ingredients`))
###Remove all numbers##
myCocktail$ingredientList <- removeNumbers(myCocktail$ingredientList)
###-----------------------------------###
###Remove words that are not necessary###
###-----------------------------------###
###To lower###
myCocktail$ingredientList <- tolower(myCocktail$ingredientList)
###Remove stopwords###
myCocktail$ingredientList <- removeWords(myCocktail$ingredientList, stopwords("english"))
###Remove everything in between bracket###
myCocktail$ingredientList <-gsub("\\([^\\)]*\\)", "", myCocktail$ingredientList, perl=TRUE)
###Remove certain parts before the main alcohol###
myCocktail$ingredientList <- gsub(pattern = ".*whisky", replacement = "whiskey", myCocktail$ingredientList)
myCocktail$ingredientList <- gsub(pattern = ".*whiskey", replacement = "whiskey", myCocktail$ingredientList)
myCocktail$ingredientList <- gsub(pattern = ".*vermouth", replacement = "vermouth", myCocktail$ingredientList)
myCocktail$ingredientList <- gsub(pattern = ".*brandy", replacement = "brandy", myCocktail$ingredientList)
myCocktail$ingredientList <- gsub(pattern = ".*rum", replacement = "rum", myCocktail$ingredientList)
myCocktail$ingredientList <- gsub(pattern = "lillet.*", replacement = "lillet", myCocktail$ingredientList)
###Wordlist with words that need to be removed###
wordList <- c("cl", "oz", "parts", "ml", "one", "part", "dash", "ounces", "ounce", "tsp", "½", "¾","us fluid", "teaspoon", "tsp")
myCocktail$ingredientList <- removeWords(myCocktail$ingredientList, wordList)
View(myCocktail)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
######################################################################################
###World cloud, creating one so we know which words are needed but are standing out###
######################################################################################
docs <- Corpus(VectorSource(myCocktail$ingredientList))
docs
